// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MobileGwDataSync.Data.Context;

#nullable disable

namespace MobileGwDataSync.Data.Migrations
{
    [DbContext(typeof(ServiceDbContext))]
    [Migration("20250920045258_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.20");

            modelBuilder.Entity("MobileGwDataSync.Data.Entities.AlertHistoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AcknowledgedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("AcknowledgedBy")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAcknowledged")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NotificationsSent")
                        .HasColumnType("TEXT");

                    b.Property<int>("RuleId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TriggeredAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RuleId");

                    b.HasIndex("TriggeredAt");

                    b.ToTable("alert_history", (string)null);
                });

            modelBuilder.Entity("MobileGwDataSync.Data.Entities.AlertRuleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Channels")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("ThrottleMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("alert_rules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Channels = "[\"email\"]",
                            Condition = "Status == Failed",
                            CreatedAt = new DateTime(2025, 9, 20, 4, 52, 56, 876, DateTimeKind.Utc).AddTicks(3863),
                            IsEnabled = true,
                            Name = "Sync Failure Alert",
                            Severity = "Critical",
                            ThrottleMinutes = 5,
                            Type = "SyncStatus"
                        },
                        new
                        {
                            Id = 2,
                            Channels = "[\"email\"]",
                            Condition = "DurationMinutes > 10",
                            CreatedAt = new DateTime(2025, 9, 20, 4, 52, 56, 876, DateTimeKind.Utc).AddTicks(3867),
                            IsEnabled = true,
                            Name = "Slow Sync Alert",
                            Severity = "Warning",
                            ThrottleMinutes = 15,
                            Type = "Duration"
                        });
                });

            modelBuilder.Entity("MobileGwDataSync.Data.Entities.PerformanceMetricEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MetricValue")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RunId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MetricName");

                    b.HasIndex("RecordedAt");

                    b.HasIndex("RunId");

                    b.ToTable("performance_metrics", (string)null);
                });

            modelBuilder.Entity("MobileGwDataSync.Data.Entities.SyncJobEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Configuration")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CronExpression")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastRunAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextRunAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("sync_jobs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "default-sync-job",
                            CreatedAt = new DateTime(2025, 9, 20, 4, 52, 56, 876, DateTimeKind.Utc).AddTicks(3706),
                            CronExpression = "0 0 * * * ?",
                            IsEnabled = true,
                            Name = "Default 1C Sync Job"
                        });
                });

            modelBuilder.Entity("MobileGwDataSync.Data.Entities.SyncRunEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Metadata")
                        .HasColumnType("TEXT");

                    b.Property<int>("RecordsFetched")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecordsProcessed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("StartTime");

                    b.HasIndex("Status");

                    b.ToTable("sync_runs", (string)null);
                });

            modelBuilder.Entity("MobileGwDataSync.Data.Entities.SyncRunStepEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DurationMs")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Metrics")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RunId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RunId");

                    b.HasIndex("StepName");

                    b.ToTable("sync_run_steps", (string)null);
                });

            modelBuilder.Entity("MobileGwDataSync.Data.Entities.AlertHistoryEntity", b =>
                {
                    b.HasOne("MobileGwDataSync.Data.Entities.AlertRuleEntity", "Rule")
                        .WithMany("History")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rule");
                });

            modelBuilder.Entity("MobileGwDataSync.Data.Entities.PerformanceMetricEntity", b =>
                {
                    b.HasOne("MobileGwDataSync.Data.Entities.SyncRunEntity", "Run")
                        .WithMany("Metrics")
                        .HasForeignKey("RunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Run");
                });

            modelBuilder.Entity("MobileGwDataSync.Data.Entities.SyncRunEntity", b =>
                {
                    b.HasOne("MobileGwDataSync.Data.Entities.SyncJobEntity", "Job")
                        .WithMany("Runs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("MobileGwDataSync.Data.Entities.SyncRunStepEntity", b =>
                {
                    b.HasOne("MobileGwDataSync.Data.Entities.SyncRunEntity", "Run")
                        .WithMany("Steps")
                        .HasForeignKey("RunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Run");
                });

            modelBuilder.Entity("MobileGwDataSync.Data.Entities.AlertRuleEntity", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("MobileGwDataSync.Data.Entities.SyncJobEntity", b =>
                {
                    b.Navigation("Runs");
                });

            modelBuilder.Entity("MobileGwDataSync.Data.Entities.SyncRunEntity", b =>
                {
                    b.Navigation("Metrics");

                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}
